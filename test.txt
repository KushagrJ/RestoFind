/*

 * Node.js is a runtime environment that allows you to run JavaScript code on
   the server (i.e. outside a web browser).
 * Express.js is a framework that works on top of Node.js.
   It provides various mechanisms to handle common server-side tasks.
 * EJS (Embedded JavaScript) is a templating language that lets you generate
   HTML with plain JavaScript.
 * Mongoose.js is an Object-Document Mapper library which allows you to interact
   with MongoDB (which is a document database) using JavaScript objects.

 * Middleware in Express are functions that come into play after the server
   receives the request and before the response is sent to the client.
 * They are arranged in a chain and are called in sequence.

 * From within a folder, use npm init to create a package.json file for the
   corresponding Node.js web application.
 * npm init -y will create the package.json file using the default settings.

 * Use sudo npm i express mongoose ejs method-override etc. to install Express,
   Mongoose, EJS, method-override, etc. for the corresponding Node.js project.

 * Use node app.js or nodemon app.js to start the Express server.
   Using nodemon will automatically restart the server whenever changes are
   saved.

 * Go to http://localhost:<port number> (for eg., localhost:3000) using a web
   browser to see the first page hosted from the corresponding web application.

 * Use sudo brew services start mongodb-community@<version no. (for eg.. 6.0)>
   to start the MongoDB service.
 * To access the MongoDB shell, use mongosh (instead of mongo).

 * The asyncHandler() described at https://stackoverflow.com/a/51391081 has not
   been used here because understanding it requires a good knowledge of
   JavaScript.

 * To understand cookies and sessions, see https://stackoverflow.com/a/32564053,
   MDN, freeCodeCamp, Google, etc.

 * const hashed_password = await bcrypt.hash(password, 12);
   Here, 12 represents the cost factor, which controls how much time is needed
   to calculate a single BCrypt hash. The higher the cost factor, the more
   hashing rounds are done. Increasing the cost factor by 1 doubles the
   necessary time. The more time is necessary, the more difficult is
   brute-forcing.
 * The hashed password consists of the salt in plain text, concatenated with the
   hashed version of the salt + the password.
   For eg., if the salt is nOUIs5kJ7naTuTFkBy1veu and if the password is abcdef,
   then the resulting hashed password may be
   $2y$12$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa, where 2y
   represents the hashing algorithm (BCrypt), 12 is the cost factor,
   nOUIs5kJ7naTuTFkBy1veu is the salt, and K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa is
   the hashed version of the salt + abcdef.
 * if (!(req.session.user_id)) {
       // This code will be reached, for eg., when user_id is undefined (such
       // as when the user_id property doesn't exist on the req.session object
       // because no successful login has been done with respect to the current
       // session), or when user_id is equal to null (such as when user_id is
       // explicitly assigned null during logging out the user with respect to
       // the current session).
   }
 * Instead of implementing authentication from scratch (by using brycpt, by
   manually manipulating the req.session object, etc. (as shown above)), we have
   used Passport.js, which does all of this work for us.

 * To understand Bootstrap, EJS, Node.js, Express.js, MongoDB, Mongoose.js,
   Passport.js, etc., see MDN, freeCodeCamp, documentations, Google, etc.

 */







DON'T IMPLEMENT ANY VALIDATIONS TO ENSURE THAT REQUESTS VIA, FOR EG., POSTMAN
ARE VALID.
DONT'T THINK ABOUT CONCURRENCY, AND BUILD THE APP ASSUMING THAT ONLY ONE PERSON
WILL BE USING IT AT ANY GIVEN TIME.







HERE, VOTE IS ITS OWN MODEL, WHEREAS CANDIDATE ISN'T (AND IS DIRECTLY EMBEDDED
INSIDE POLL).
ACTUALLY, BOTH ARE SIMILAR AND BOTH COULD'VE BEEN THEIR OWN MODELS, OR BOTH
COULD'VE BEEN DIRECTLY EMBEDDED INSIDE POLL.

IN THE ER DIAGRAM, MAKE 4 ENTITIES - POLL, USER (IS-A VOTER/ORGANISER),
CANDIDATE, VOTE.







Edit Page

Add functionality to delete candidates and voters as well.
Checkbox against each candidate/voter.

The votes by those voters which are deleted must also be deleted in the backend.
Also, the votes for those candidates which are deleted must also be deleted in
the backend.


NOTE - FOR THOSE CANDIDATES WHICH AREN'T DELETED, CONSIDER THEM TO BE THE SAME
CANDIDATE IN THE BACKEND, EVEN IF TITLE, DESCRIPTION AND IMAGES CHANGE.
THUS, THE IMAGES MUST PERSIST (IF NEW IMAGES ARE NOT UPLOADED), AND THEIR VOTES
MUST PERSIST (TO MAKE VOTES PERSIST, SIMPLY KEEP THE OBJECT ID OF THE CANDIDATE
SAME).
SIMPLY PUT, FOR CANDIDATES, THE OLD CANDIDATES AND THE EXISTING CANDIDATES ON
THE EDIT PAGE MUST BE CONSIDERED TO BE THE SAME IN THE BACKEND.

FOR DELETING VOTES OF DELETED VOTERS, SIMPLY CREATE AN ARRAY OF CURRENT VOTERS,
AND DELETE ALL VOTES BY VOTERS NOT BELONGING TO THE ARRAY.
SIMPLY PUT, FOR VOTERS, AFTER EDITING, SIMPLY DELETE THE OLD VOTERS AND ADD THE
CURRENT VOTERS. EDITING VOTERS IS NOT AS COMPLICATED AS EDITING CANDIDATES.


For those candidates which aren't deleted, simply copy the image urls and image
names from the old version to the new version.
Similarly for Object Id's.


Add client-side logic to ensure, on both the New Page and the Edit Page, that at
least 2 candidates have been added, and if anyone_can_vote is false, then at
least 1 voter has been added.

Also, on the edit page, if a candidate has been marked to be deleted, then its
title must no longer be required.
Add an event listener to add_poll_button which will dynamically add/remove the
required attribute to/from every corresponding candidate's title.









Show Page

Show a list of eligible voters to the organiser.
Show a button to conclude the poll.


Poll Details                           Cast Vote

Eligible Voters                        Votes

Results


Types of viewers of show page -
1. Organiser, Eligible Voter
2. Organiser, Non-Eligible Voter
3. Non-Organiser, Eligible Voter
4. Non-Organiser, Non-Eligible Voter

[To non-organiser, non-eligible voters, only the details of the poll should be
 visible]










Index Page

Two columns -
1. Ongoing
2. Concluded
